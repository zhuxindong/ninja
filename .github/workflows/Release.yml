name: Release

on:
  push:
    tags: ["v*"]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:

  linux:
    name: Linux
    runs-on: ubuntu-latest
    environment: Linux
    steps:
      - uses: actions/checkout@v3

      - name: Install depends
        run: |
          sudo apt update && sudo apt install upx rename -y

      - name: Get tag
        if: startsWith(github.ref, 'refs/tags/')
        id: tag
        uses: dawidd6/action-get-tag@v1
        with:
          strip_v: true

      - name: Tag Check
        run: |
          echo "tag=${{ steps.tag.outputs.tag }}" >> $GITHUB_ENV
          echo "tag=${{ steps.tag.outputs.tag }}" >> $GITHUB_OUTPUT
          if [ -z "${{ steps.tag.outputs.tag }}" ]; then
            echo "tag=latest" >> $GITHUB_OUTPUT
            echo "tag=latest" >> $GITHUB_ENV
          fi

      - name: Build package
        shell: bash
        run: |
          rmi=true bash +x build_cross.sh
          
      - name: Upload binaries to GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          token: ${{ secrets.CR_PAT }}
          files: |
            uploads/*
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') }}
          generate_release_notes: true

  # macos:
  #   runs-on: macos-12
  #   name: MacOS
  #   environment: MacOS
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Set up Rust
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable

  #     - name: Get tag
  #       if: startsWith(github.ref, 'refs/tags/')
  #       id: tag
  #       uses: dawidd6/action-get-tag@v1
  #       with:
  #         strip_v: true

  #     - name: Tag Check
  #       run: |
  #         echo "tag=${{ steps.tag.outputs.tag }}" >> $GITHUB_ENV
  #         echo "tag=${{ steps.tag.outputs.tag }}" >> $GITHUB_OUTPUT
  #         if [ -z "${{ steps.tag.outputs.tag }}" ]; then
  #           echo "tag=latest" >> $GITHUB_OUTPUT
  #           echo "tag=latest" >> $GITHUB_ENV
  #         fi

  #     - name: Build
  #       shell: bash
  #       run: | 
  #         os=macos bash +x build_cross.sh

  #     - name: Upload binaries to GitHub Release
  #       uses: softprops/action-gh-release@v1
  #       if: startsWith(github.ref, 'refs/tags/')
  #       with:
  #         token: ${{ secrets.CR_PAT }}
  #         files: |
  #           uploads/*
  #         prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') }}
  #         generate_release_notes: true

  # openwrt:
  #   name: OpenWrt
  #   runs-on: ubuntu-20.04
  #   needs: [ linux ]
  #   environment: OpenWrt
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       target:
  #         - arch: "aarch64_generic"
  #           sdk: "https://downloads.openwrt.org/releases/22.03.2/targets/rockchip/armv8/openwrt-sdk-22.03.2-rockchip-armv8_gcc-11.2.0_musl.Linux-x86_64.tar.xz"
  #         - arch: "aarch64_cortex-a53"
  #           sdk: "https://downloads.openwrt.org/releases/22.03.2/targets/bcm27xx/bcm2710/openwrt-sdk-22.03.2-bcm27xx-bcm2710_gcc-11.2.0_musl.Linux-x86_64.tar.xz"
  #         - arch: "aarch64_cortex-a72"
  #           sdk: "https://downloads.openwrt.org/releases/22.03.2/targets/bcm27xx/bcm2711/openwrt-sdk-22.03.2-bcm27xx-bcm2711_gcc-11.2.0_musl.Linux-x86_64.tar.xz"
  #         - arch: "x86_64"
  #           sdk: "https://downloads.openwrt.org/releases/18.06.9/targets/x86/64/openwrt-sdk-18.06.9-x86-64_gcc-7.3.0_musl.Linux-x86_64.tar.xz"
  #         - arch: "arm_cortex-a9"
  #           sdk: "https://downloads.openwrt.org/releases/22.03.2/targets/bcm53xx/generic/openwrt-sdk-22.03.2-bcm53xx-generic_gcc-11.2.0_musl_eabi.Linux-x86_64.tar.xz"
  #         - arch: "arm_mpcore"
  #           sdk: "https://downloads.openwrt.org/releases/22.03.2/targets/oxnas/ox820/openwrt-sdk-22.03.2-oxnas-ox820_gcc-11.2.0_musl_eabi.Linux-x86_64.tar.xz"
  #         - arch: "arm_cortex-a5_vfpv4"
  #           sdk: "https://downloads.openwrt.org/releases/22.03.2/targets/at91/sama5/openwrt-sdk-22.03.2-at91-sama5_gcc-11.2.0_musl_eabi.Linux-x86_64.tar.xz"
  #         - arch: "arm_cortex-a7_neon-vfpv4"
  #           sdk: "https://downloads.openwrt.org/releases/22.03.2/targets/ipq40xx/generic/openwrt-sdk-22.03.2-ipq40xx-generic_gcc-11.2.0_musl_eabi.Linux-x86_64.tar.xz"

  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Install build requirements
  #       run: |
  #         set -e
  #         sudo apt-get update
  #         sudo apt-get install -y build-essential ccache ecj fastjar file g++ gawk \
  #         gettext git java-propose-classpath libelf-dev libncurses5-dev \
  #         libncursesw5-dev libssl-dev python2.7-dev python3 unzip wget \
  #         python3-distutils python3-setuptools python3-dev rsync subversion \
  #         swig time xsltproc zlib1g-dev
  #     - name: Install OpenWrt SDK
  #       run: |
  #         set -e
  #         wget -O openwrt-sdk.tar.xz ${{ matrix.target.sdk }}
  #         xz -q -d openwrt-sdk.tar.xz && tar -xvf openwrt-sdk.tar
  #         mv -f openwrt-sdk-* openwrt-sdk
  #     - name: Build Package
  #       run: |
  #         set -e
  #         rm -rf ./openwrt && svn co https://github.com/gngpp/ninja/trunk/openwrt
  #         echo "src-link ninja $GITHUB_WORKSPACE/openwrt" > openwrt-sdk/feeds.conf
  #         echo 'CONFIG_PACKAGE_ninja=y
  #         CONFIG_PACKAGE_luci-app-ninja=y
  #         ' >> openwrt-sdk/.config
  #         cd openwrt-sdk
  #         cat feeds.conf.default >> feeds.conf
  #         cat feeds.conf

  #         ./scripts/feeds update -a > /dev/null
  #         make defconfig

  #         ./scripts/feeds install -d y -f -a
  #         make package/ninja/compile V=s
  #         make package/luci-app-ninja/compile V=s
  #         tree bin/packages/
  #     - name: Archive package
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: ninja-${{ matrix.target.arch }}
  #         path: openwrt-sdk/bin/packages/${{ matrix.target.arch }}/ninja/ninja*.ipk
  #         if-no-files-found: error
  #     - name: Archive luci packages
  #       if: ${{ matrix.target.arch == 'x86_64' }}
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: ninja-luci-${{ matrix.target.arch }}
  #         path: openwrt-sdk/bin/packages/${{ matrix.target.arch }}/ninja/luci-*.ipk
  #         if-no-files-found: error
  #     - name: Upload package to GitHub Release
  #       uses: softprops/action-gh-release@v1
  #       if: startsWith(github.ref, 'refs/tags/')
  #       with:
  #         token: ${{ secrets.TOKEN }}
  #         files: |
  #           openwrt-sdk/bin/packages/${{ matrix.target.arch }}/ninja/ninja*.ipk
  #         generate_release_notes: true
  #     - name: Upload luci packages to GitHub Release
  #       uses: softprops/action-gh-release@v1
  #       if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.target.arch == 'x86_64' }}
  #       with:
  #         token: ${{ secrets.TOKEN }}
  #         files: |
  #           openwrt-sdk/bin/packages/${{ matrix.target.arch }}/ninja/luci-*.ipk
  #         generate_release_notes: true

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [ linux ]
    environment: Docker
    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Get tag
        if: startsWith(github.ref, 'refs/tags/')
        id: tag
        uses: dawidd6/action-get-tag@v1
        with:
          strip_v: true

      - name: Login to DockerHub
        if: startsWith(github.ref, 'refs/tags/')
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # - name: Login to GitHub Container Registry
      #   if: startsWith(github.ref, 'refs/tags/')
      #   uses: docker/login-action@v2
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.CR_PAT }}
            
      - name: Build and push
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          cd docker
          tag=${{ steps.tag.outputs.tag }} bash +x build.sh
          cd -

      - name: Docker Hub Description
        if: startsWith(github.ref, 'refs/tags/')
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: zhuxindong/ninja